using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace IPC
{

	public struct Request
	{
		public byte command;
		public string path ;
		public dynamic time;
	}
   public struct Command
    {
		public const byte START_SCAN = 1;
		public const byte STOP_SCAN = 2;
		public const byte MOVE_TO_QUAR = 3;
		public const byte BACK_FROM_QUAR = 4;
		public const byte DELETE_FILE = 5;
		public const byte ADD_MONIT = 6;
		public const byte REMOVE_MONIT = 7;
		public const byte SCHEDULE_ADD = 8;
		public const byte REMOVE_DISTRUST = 16;
		public const byte SCHEDULE_REMOVE = 14;
		//public const byte SCAN_COUNT = 9;//возвращаю клиенту количество отсканированных объектов
		//public const byte DISTRUST_DATA = 10;//возвращаю клиенту найденную угрозу
		public const byte QUARANTINE_DATA = 11;//посылает запрос на список 
		public const byte UPDATE_DATA = 12;//ЗАПРОС НА ОБНОВЛЕНИЕ БД, КЛИЕНТ МЕНЯЕТ ФАЙЛ 
		//public const byte CLOSE = 13;// закрытие сервиса
		//const byte CURRENT_SCAN = 15;


		/*byte[] mesWithStringArg(byte COMMAND , string arg)
		{
			short size = Convert.ToInt16(arg.Length);
			byte[] result = new byte[1 + 2 + size];
			result[0] = (COMMAND);
			byte[] mass = BitConverter.GetBytes(size);
			result[1] = mass[0];
			result[2] = mass[1];
			byte[] temp = Encoding.UTF8.GetBytes(arg);
			for (short i = 0; i < size; i++)
			{
				result[3 + i] = temp[i];
			}
			return result;
		}*/
		public byte[] createMessage(byte COMMAND , dynamic
			/* string|int */ arg=null , dynamic /* DateTime|NULL */  time = null )
		{
			switch (COMMAND)
			{

				case UPDATE_DATA:
				case STOP_SCAN:
					{
						byte[] result = new byte[1];
						result[0] = COMMAND;
						return result;
					}

				case START_SCAN:
				case ADD_MONIT:
				case REMOVE_MONIT:
					{
						short size = Convert.ToInt16(arg.Length);
						byte[] result = new byte[1 + 2 + size ];
						result[0] = (COMMAND);
						byte[] mass = BitConverter.GetBytes(size);
						result[1] = mass[0];
						result[2] = mass[1];
						byte[] temp = Encoding.UTF8.GetBytes(arg);
						for (short i = 0; i < size; i++)
						{
							result[3 + i] = temp[i];
						}
						return result;
					}
				
				case SCHEDULE_ADD:
				case SCHEDULE_REMOVE:

					{
						short size = Convert.ToInt16(arg.Length);
						byte[] result = new byte[1 + 2 + size + sizeof(long)];
						result[0] = (COMMAND);
						byte[] mass = BitConverter.GetBytes(size);
						result[1] = mass[0];
						result[2] = mass[1];
						byte[] temp = Encoding.UTF8.GetBytes(arg);
						for (short i = 0; i < size; i++)
						{
							result[3 + i] = temp[i];
						}
						temp = BitConverter.GetBytes(time.ToBinary());
						for (short i = 0; i < sizeof(long); i++)
						{
							result[3 + size + i] = temp[i];
						}
						return result;
					}
				case BACK_FROM_QUAR:
				case DELETE_FILE:
				case MOVE_TO_QUAR:
				case REMOVE_DISTRUST:
					{
						short size = Convert.ToInt16(arg.Length);
						byte[] result = new byte[1 + 2 + size + 2 + time.Length];
						result[0] = (COMMAND);
						byte[] mass = BitConverter.GetBytes(size);
						result[1] = mass[0];
						result[2] = mass[1];
						byte[] temp = Encoding.UTF8.GetBytes(arg);
						for (short i = 0; i < size; i++)
						{
							result[3 + i] = temp[i];
						}
						
						short size2 = Convert.ToInt16(time.Length);
						mass = BitConverter.GetBytes(size2);
						result[3 + size] = mass[0];
						result[3 + size+1] = mass[1];

						temp = Encoding.UTF8.GetBytes(time);
						for (short i = 0; i < time.Length; i++)
						{
							result[5 + size + i] = temp[i];
						}
						return result;
						
					}



				/*	case SCAN_COUNT:
						{
							byte[] result = new byte[0 + sizeof(int)];

							result[0] = COMMAND;

							byte[] temp = BitConverter.GetBytes(arg);//нужно запомнить что я не добавляю длину инта
							for (int i = 0; i < sizeof(int); i++)
								result[i + 1] = temp[i];
							return result;
						}
	*/
				default:
					return null;
			}
		}
	}
}
