using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DataIO;
using System.Threading;
namespace DataChanger
{
    public partial class FormBase : Form
    {
        public FormBase()
        {
            InitializeComponent();
            this.data = new Data();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            var nameColumn = new DataGridViewColumn();
            nameColumn.HeaderText = "Название"; //текст в шапке
          //  nameColumn.ReadOnly = true; //значение в этой колонке нельзя править
            nameColumn.Name = "name"; //текстовое имя колонки, его можно использовать вместо обращений по индексу
            nameColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            nameColumn.Width = 100; //ширина колонки
            nameColumn.CellTemplate = new DataGridViewTextBoxCell(); //тип нашей колонки

            var prefixColumn = new DataGridViewColumn();
            prefixColumn.HeaderText = "Префикс сигнатуры";
            prefixColumn.Name = "prefix";
            prefixColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            prefixColumn.Width = 80; //ширина колонки
            prefixColumn.CellTemplate = new DataGridViewTextBoxCell();

            var lengthSignColumn = new DataGridViewColumn();
            lengthSignColumn.HeaderText = "Длина сигнатуры";
            lengthSignColumn.Name = "signLength";
            lengthSignColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            lengthSignColumn.Width = 70; //ширина колонки
            lengthSignColumn.CellTemplate = new DataGridViewTextBoxCell();

            var hashColumn = new DataGridViewColumn();
            hashColumn.HeaderText = "SHA256";
            hashColumn.Name = "hash";
            hashColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            hashColumn.Width = 590; //ширина колонки
            hashColumn.CellTemplate = new DataGridViewTextBoxCell();

            var offsetBeginColumn = new DataGridViewColumn();
            offsetBeginColumn.HeaderText = "Отступ начала";
            offsetBeginColumn.Name = "offsetBegin";
            offsetBeginColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            offsetBeginColumn.Width = 60; //ширина колонки
            offsetBeginColumn.CellTemplate = new DataGridViewTextBoxCell();

            var offsetEndColumn = new DataGridViewColumn();
            offsetEndColumn.HeaderText = "Отступ конца";
            offsetEndColumn.Name = "offsetEnd";
            offsetEndColumn.Frozen = true; //флаг, что данная колонка всегда отображается на своем месте
            offsetEndColumn.Width = 60; //ширина колонки
            offsetEndColumn.CellTemplate = new DataGridViewTextBoxCell();
            
            //https://docs.microsoft.com/ru-ru/dotnet/api/system.windows.forms.datagridview.columns?view=netframework-4.8
            dataGridView1.Columns.Add(nameColumn);
            dataGridView1.Columns.Add(prefixColumn);
            dataGridView1.Columns.Add(lengthSignColumn);
            dataGridView1.Columns.Add(hashColumn);
            dataGridView1.Columns.Add(offsetBeginColumn);
            dataGridView1.Columns.Add(offsetEndColumn);

       //     Cursor.Current = Cursors.Arrow;
            if (!data.isCorrectData("C:/Users/cheva/source/repos/AntiMalware/baseData.bin"))
                data.createData();

            fillData();

        }
        
        private void dataGridView1_CellLeave(object sender, DataGridViewCellEventArgs e) {

            var column = e.ColumnIndex;
            try
            {
                if (column == 0) { dataGridView1[column, e.RowIndex].Value = Convert.ToString(dataGridView1[column, e.RowIndex].Value); }
                else if (column == 1) { dataGridView1[column, e.RowIndex].Value = Encoding.UTF8.GetBytes((char[])(dataGridView1[column, e.RowIndex].Value)); }
                else if (column == 2) { dataGridView1[column, e.RowIndex].Value = Convert.ToString(dataGridView1[column, e.RowIndex].Value); }
                else if (column == 3) { dataGridView1[column, e.RowIndex].Value = Encoding.UTF8.GetBytes((char[])(dataGridView1[column, e.RowIndex].Value)); }
                else if (column == 4) { dataGridView1[column, e.RowIndex].Value = Convert.ToInt64(dataGridView1[column, e.RowIndex].Value); }
                else if (column == 5) { dataGridView1[column, e.RowIndex].Value = Convert.ToInt64(dataGridView1[column, e.RowIndex].Value); }
            }
            catch { }
        }

        public void fillData()
        {
            RecordBank Bank = new RecordBank("C:/Users/cheva/source/repos/AntiMalware/baseData.bin");
            Bank.updateData();
            dataGridView1.Rows.Clear();
            int i = 0;
            foreach (KeyValuePair<long, HashSet<Record>> para in Bank.storage)
            {
                byte[] sign = BitConverter.GetBytes( para.Key);
                foreach (Record list in para.Value)
                {

                    dataGridView1.Rows.Add();
                    dataGridView1["name", i].Value = Encoding.UTF8.GetString(list.name);
                    dataGridView1["prefix", i].Value = BitConverter.ToString( sign);
                    dataGridView1["signLength", i].Value = BitConverter.ToInt32(list.signSize, 0);
                    dataGridView1["hash", i].Value = BitConverter.ToString( list.hash);
                    dataGridView1["offsetEnd", i].Value = BitConverter.ToInt64(list.offsetEnd, 0);
                    dataGridView1["offsetBegin", i].Value = BitConverter.ToInt64(list.offsetStart, 0);
                    i++;




                }
            }
            dataGridView1.Rows.Add();
        }
        
        private void btnAddRow_Click(object sender, EventArgs e)
        {
            dataGridView1.Rows.Add();

        }



        private void btnReset_Click(object sender, EventArgs e)
        {
            // resetTable.Start();
            this.btnReset.Enabled = false;
            fillData();
            this.btnReset.Enabled = true;
        }

        public byte[] GetHash(string str)
        {
            string newStr = str.Replace(" ", "-");
            string[] spl = newStr.Split('-');

            //Parse bytes and add them to a list
            List<byte> buf = new List<byte>();
            foreach (string s in spl)
            {
                buf.Add(byte.Parse(s, System.Globalization.NumberStyles.HexNumber));
            }

            //Convert list to byte[]
            byte[] bytes = buf.ToArray();
            return bytes;
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            DataWriter dw = new DataWriter();
            dw.setPath("C:/Users/cheva/source/repos/AntiMalware/baseData.bin");
            bool isItFirst = true;
            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                try {
                    DataGridViewCellCollection cells = row.Cells;
                    Record rec = new Record();
                    for (byte i = 0; i < 6; i++) {
                        switch (i)
                        {
                            case 0:
                                rec.name = Encoding.UTF8.GetBytes(((string)cells[i].Value).ToCharArray());
                                break;

                            case 1:
                                rec.prefix = GetHash((string)cells[i].Value);
                                break;
                            case 2:
                                rec.signSize = BitConverter.GetBytes(Convert.ToInt32((Convert.ToString(cells[i].Value))));
                                break;
                            case 3:
                                rec.hash = GetHash((string)cells[i].Value);
                                break;
                            case 4:
                                rec.offsetStart = BitConverter.GetBytes(Convert.ToInt64((Convert.ToString(cells[i].Value))));
                                break;
                            case 5:
                                rec.offsetEnd = BitConverter.GetBytes(Convert.ToInt64((Convert.ToString(cells[i].Value))));
                                break;
                            default:
                                break;
                        }
                    }
                    if (isItFirst==true)
                    {
                        data.createData();
                        isItFirst = false;
                    }
                    if (dw.writeInRec(ref rec))
                        MessageBox.Show("Success");
                   else MessageBox.Show("Error");
                } catch(NullReferenceException) { return; }

                }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }
    }
}
