using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace DataIO
{
    public class DataReader
    {
        protected Record deserializeRecord(byte[] msg)
        {
            Int64 offset = 0;

            Record record = new Record();
            //NAME_SIZE//1
            byte[] buffer = new byte[sizeof(byte)];
            
                buffer[0] = msg[0];
            
            record.nameSize = (buffer[offset]);
            offset += 1;


            //name//
            buffer = new byte[record.nameSize + 1];
            for (int i = 0; i < record.nameSize; i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.name = (buffer);
            offset += record.nameSize;

            //PREFIX
            buffer = new byte[sizeof(Int64)];
            for (int i = 0; i < this.data.prefSize; i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.prefix = buffer;
            offset += this.data.prefSize;
            //SIGN_SIZE
            buffer = new byte[sizeof(int)];
            for (int i = 0; i < sizeof(int); i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.signSize = (buffer);
            offset += sizeof(int);
            //HASH
            buffer = new byte[32];

            for (int i = 0; i < this.data.hashSize; i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.hash = (buffer);
            offset += record.hash.Length;


            //OFFSET_BEGIN
            buffer = new byte[sizeof(long)];

            for (byte i = 0; i < 8; i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.offsetStart = (buffer);
            offset += 8;

            //OFFSET_END
            buffer = new byte[sizeof(long)];

            for (byte i = 0; i < 8; i++)
            {
                buffer[i] = msg[offset + i];
            }
            record.offsetEnd = buffer;
            offset += 8;
            //TYPE 1 BYTE
            /*  byte buffer2=0 ;

               for (byte i = 0; i < 1; i++)
               {
                   buffer2 = msg[offset + i];
               }

               if (buffer2 == 0)
               {
                   record.type = "exe";
               }
               else if (buffer2 == 1) record.type = "zip";

               offset++;*/
            return record;
        }
        protected Data data = new Data();
        protected Boolean reopen(ulong _offset) { return false; }

        protected BinaryReader stream;
        protected String path;
        protected Int64 offset = 8 + 4;
        public void setPath(String _path)
        {
            if (File.Exists(_path))
                this.path = _path;
        }

        public dynamic readNext()
        {
            //offset=8+4 имя+число_записей
            try
            {

                this.stream = new BinaryReader(File.Open(this.path,FileMode.Open));
                byte[] buffer = new byte[150];
                stream.BaseStream.Seek ( this.offset,SeekOrigin.Begin);
                buffer[0] = Convert.ToByte(stream.ReadByte());
                for (long i = 1; i < data.recordSize + buffer[0]; i++)//TODO: ОТКУДА Я УЗНАЮ РАЗМЕР СТРУКТУРЫ?
                {
                    try
                    {
                        buffer[i] = (stream.ReadByte());//тут исключение если конец файла
                    }
                    catch {
                        stream.Close();
                        return false; }
                }
                this.offset += data.recordSize + buffer[0];
                stream.Close();
                dynamic temp = this.deserializeRecord(buffer);//TODO: ОБРАБОТКА ИСКЛЮЧЕНИЙ
                return temp;
            }
            catch(EndOfStreamException) { stream.Close(); return false; }


        }
    }
}
