using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.ServiceProcess;
using IPC;
using Kernel;
using Microsoft.WindowsAPICodePack.Dialogs;
namespace AntiMalware
{
    public partial class Form1 : Form
    {
        private bool monit;
        private bool sched;
        private bool boolService;
        public Form1()
        {


            InitializeComponent();



        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (PathToScanObjBox.Text != null)
            {
                ListOfScannedObj.Items.Clear();
                client.sentMessage(Command.START_SCAN, PathToScanObjBox.Text);
            }

        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (PathToScanObjBox2.Text != null)
            {
                DateTime now = DateTime.Now;

                DateTime schedule = new DateTime(now.Year, now.Month, now.Day, Convert.ToInt32(HourNumeric.Value),
                    Convert.ToInt32(minutesNumeric.Value), now.Second);

                client.sentMessage(Command.SCHEDULE_ADD, PathToScanObjBox2.Text, schedule);

                ListViewItem item = new ListViewItem();
                item.Text = PathToScanObjBox2.Text;
                item.SubItems.Add ( schedule.ToLongDateString());
                ScheduleList.Items.Add(item);
            }

        }

        private void minutes_ValueChanged(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            service = new ServiceController("AntiMalwareStudent");

            Task.Run(() => BackGroundService());

            /*if (service.Status.Equals(ServiceControllerStatus.Stopped))
                service.Start();
            else if (service.Status.Equals(ServiceControllerStatus.Paused))
                service.Continue();*/


            client = new Client();
            queueList = new HashSet<Pair<string, DateTime>>();
            serial = new ModulesSerializer();
           /* TSchedule = new Thread(BackGroundSchedule);
            TMonitor = new Thread(BackGroundMonitor);
            TService = new Thread(BackGroundService);*/
            TProcess = new Thread(BackGroundProcess);
            TProcess.Start();
        }



        public void BackGroundProcess()
        {
            while (true)
            {
                

                Response resp = client.getMessage();

                switch (resp.command)
                {
                    case Response.CURRENT_SCAN:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                CurrentScanObjBox.Text = null;
                                CurrentScanObjBox.Text = resp.path;
                            });
                            break;
                        }
                    case Response.CURRENT_SCAN_SCHEDULE:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                CurrentScanBox2.Text = null;
                                CurrentScanBox2.Text = resp.path;
                            });
                            break;
                        }
                    case Response.RESULT_SCAN_FILE:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                ListOfScannedObj.Items.Add(resp.path);
                            });
                            if (resp.nameMalware != null)
                            {
                                ListViewItem item = new ListViewItem();
                                item.Text = resp.path;
                                
                                item.SubItems.Add(  resp.nameMalware);
                                Invoke((MethodInvoker)delegate
                                {
                                    ListOfThreat.Items.Add(item);
                                });
                            }

                            break;
                        }

                    

                    case Response.MONITOR_CALLBACK:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                ListOfScannedObj3.Items.Add(resp.path);
                            });
                            if (resp.nameMalware != null)
                            {
                                ListViewItem item = new ListViewItem();
                                item.Text = resp.path;
                                item.SubItems.Add ( resp.nameMalware);
                                Invoke((MethodInvoker)delegate
                                {
                                    ListOfThreat3.Items.Add(item);
                                });
                            }

                            break;
                        }

                    case Response.SCHEDULE_CALLBACK:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                ListOfScannedObj2.Items.Add(resp.path);
                            });
                            if (resp.nameMalware != null)
                            {
                                ListViewItem item = new ListViewItem();
                                item.Text = resp.path;
                                item.SubItems.Add ( resp.nameMalware);
                                Invoke((MethodInvoker)delegate
                                {
                                    ListOfThreat2.Items.Add(item);
                                });
                            }

                            break;
                        }
                    case Response.REPORT_SCAN:
                        {
                            Invoke((MethodInvoker)delegate
                            {

                                MessageBox.Show("Сканирование " + resp.path+ " завершено",
                                 "Сканирование завершено", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                CurrentScanObjBox.Text = null;
                            });
                            break;
                        }
                    case Response.REPORT_SCHEDULE_SCAN:
                        {
                            Invoke((MethodInvoker)delegate
                            {
                                MessageBox.Show("Отсканировано " + resp.path + " , Угроз найдено:" + resp.nameMalware,
                                    "Результаты сканирования по расписанию", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            });
                            break;
                        }


                }

            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            using (CommonOpenFileDialog openFileDialog = new CommonOpenFileDialog())
            {
                openFileDialog.InitialDirectory = "C:";
                openFileDialog.IsFolderPicker = true;
                openFileDialog.AllowNonFileSystemItems = true;
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {

                    //Get the path of specified file
                    string filePath = openFileDialog.FileName;
                    PathToScanObjBox.Text = filePath;
                }




            }
        }

        private void ListOfThreat2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void MoveToQuarBtn_Click(object sender, EventArgs e)
        {

            foreach (ListViewItem item in ListOfThreat.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.MOVE_TO_QUAR, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }

        }

        private void RemoveFileBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.DELETE_FILE, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }
        private void MoveToQuarBtn2_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat2.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.MOVE_TO_QUAR, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void RemoveFileBtn2_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat2.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.DELETE_FILE, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void RemoveFileBtn3_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat3.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.DELETE_FILE, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void MoveToQuarBtn3_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat3.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.MOVE_TO_QUAR, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void RemoveFileBtn4_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in FuckingList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.DELETE_FILE, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
            tabPage4_Enter(sender, e);

        }

        private void RecoverFileBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in FuckingList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.BACK_FROM_QUAR, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
            tabPage4_Enter(sender, e);

        }

        private void AddScanObj2_Click(object sender, EventArgs e)
        {
            using (CommonOpenFileDialog openFileDialog = new CommonOpenFileDialog())
            {
                openFileDialog.InitialDirectory = "C:";
                openFileDialog.IsFolderPicker = true;
                openFileDialog.AllowNonFileSystemItems = true;
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {

                    //Get the path of specified file
                    string filePath = openFileDialog.FileName;
                    PathToScanObjBox2.Text = filePath;
                    

                }




            }

        }

        private void AddMonitorBtn_Click(object sender, EventArgs e)
        {
            using (CommonOpenFileDialog openFileDialog = new CommonOpenFileDialog())
            {
                openFileDialog.InitialDirectory = "C:";
                openFileDialog.IsFolderPicker = true;
                openFileDialog.AllowNonFileSystemItems = true;
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {

                    //Get the path of specified file
                    string filePath = openFileDialog.FileName;
                    ListViewItem item = new ListViewItem();
                    item.Text = filePath;
                    client.sentMessage(Command.ADD_MONIT, filePath);

                    MonitList.Items.Add(item);
                }




            }
        }

        private void AddFileScanBtn_Click(object sender, EventArgs e)
        {
            using (CommonOpenFileDialog openFileDialog = new CommonOpenFileDialog())
            {
                openFileDialog.InitialDirectory = "C:";
                openFileDialog.AllowNonFileSystemItems = true;
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {

                    //Get the path of specified file
                    string filePath = openFileDialog.FileName;
                    PathToScanObjBox.Text = filePath;
                }




            }

        }

        private void HoldScanBtn_Click(object sender, EventArgs e)
        {
            CurrentScanObjBox.Text = null;
            client.sentMessage(Command.STOP_SCAN);

        }

        private void RemoveScheduleBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ScheduleList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_MONIT, item.Text, item.SubItems[0].Text);
                    item.Remove();
                }
            }
        }

        private void AddScanFileBtn2_Click(object sender, EventArgs e)
        {
            using (CommonOpenFileDialog openFileDialog = new CommonOpenFileDialog())
            {
                openFileDialog.InitialDirectory = "C:";
                openFileDialog.AllowNonFileSystemItems = true;
                openFileDialog.Multiselect = true;
                if (openFileDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {

                    //Get the path of specified file
                    string filePath = openFileDialog.FileName;
                    PathToScanObjBox2.Text = filePath;
                }




            }
        }



        private void RemoveMonitBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in MonitList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_MONIT, item.Text);
                    item.Remove();
                }
            }
        }

        public void BackGroundSchedule()
        {
            sched = true;
            while (sched)
            {

                HashSet<Kernel.Pair<string, System.DateTime>> list;
                list = serial.deserializeTimeInfo("C:/antimalwareFolder" + "\\Schedule.bin");

                Invoke((MethodInvoker)delegate
                {
                    queueList = list;

                
                    ScheduleList.Items.Clear();
                });
                foreach (Pair<string, DateTime> para in queueList)
                {
                    ListViewItem item = new ListViewItem();
                    item.Text = para.First;
                    item.SubItems.Add( para.Second.ToString());
                    Invoke((MethodInvoker)delegate
                    {

                        ScheduleList.Items.Add(item);
                    });
                }

                System.Threading.Thread.Sleep(10000);
            }

        }
        public void BackGroundMonitor()
        {
            monit = true;
            while (monit)
            {
                HashSet<string>  list = serial.deserializeDirectory("C:/antimalwareFolder" + "\\Monitor.bin"); 

                Invoke((MethodInvoker)delegate
                {
                    monitorDirectory = list;
                    MonitList.Items.Clear();
                });
                foreach (string value in monitorDirectory)
                {
                    ListViewItem item = new ListViewItem();
                    item.Text = value;
                    Invoke((MethodInvoker)delegate
                   {
                       MonitList.Items.Add(item);

                   });
                }

                System.Threading.Thread.Sleep(10000);
            }

        }
        private void tabPage2_Enter(object sender, EventArgs e)
        {
            Task.Run(() => BackGroundSchedule());
        }

        private void ScheduleList_Leave(object sender, EventArgs e)
        {
            sched = false;
        }

        private void tabPage3_Enter(object sender, EventArgs e)
        {
            Task.Run(() => BackGroundMonitor());
        }

        private void tabPage3_Leave(object sender, EventArgs e)
        {
            monit = false;
        }

        private void BackGroundService()
        {
            boolService = true;
            while (true)
            {
                service = new ServiceController("AntiMalwareStudent");

                if (service.Status == ServiceControllerStatus.Running)
                {
                    Invoke((MethodInvoker)delegate
                    {

                        AddFileScanBtn.Enabled = true;
                        AddScanObjBtn.Enabled = true;
                        AddScanObj2.Enabled = true;
                        AddScanFileBtn2.Enabled = true;
                        MoveToQuarBtn.Enabled = true;
                        MoveToQuarBtn2.Enabled = true;
                        MoveToQuarBtn3.Enabled = true;
                        RemoveDistrustBtn.Enabled = true;
                        RemoveFileBtn2.Enabled = true;
                        RemoveFileBtn.Enabled = true;
                        RemoveFileBtn3.Enabled = true;
                        startScanBtn.Enabled = true;
                        AddMonitorBtn.Enabled = true;
                        startScanBtn.Enabled = true;
                        SetPlanBtn.Enabled = true;
                        RemoveScheduleBtn.Enabled = true;
                        MoveToQuarFromDistrustBtn.Enabled = true;
                        RemoveFileBtn4.Enabled = true;
                        RecoverFileBtn.Enabled = true;
                        button1.Enabled = true;
                        button2.Enabled = true;
                        button3.Enabled = true;
                        button4.Enabled = true;
                        HoldScanBtn.Enabled = true;
                        RemoveMonitBtn.Enabled = true;

                        StatusLabel.Text = "Сервис работает";
                        StatusLabel.ForeColor = Color.Green;
                    });
                }

                else if ((service.Status == ServiceControllerStatus.Stopped) ||
                     (service.Status == ServiceControllerStatus.Paused))
                {
                    Invoke((MethodInvoker)delegate
                    {
                        RemoveMonitBtn.Enabled = false;
                        AddFileScanBtn.Enabled = false;
                        AddScanObjBtn.Enabled = false;
                        AddScanObj2.Enabled = false;
                        AddScanFileBtn2.Enabled = false;
                        MoveToQuarBtn.Enabled = false;
                        MoveToQuarBtn2.Enabled = false;
                        MoveToQuarBtn3.Enabled = false;
                        RemoveDistrustBtn.Enabled = false;
                        RemoveFileBtn2.Enabled = false;
                        RemoveFileBtn.Enabled = false;
                        RemoveFileBtn3.Enabled = false;
                        startScanBtn.Enabled = false;
                        AddMonitorBtn.Enabled = false;
                        startScanBtn.Enabled = false;
                        SetPlanBtn.Enabled = false;
                        RemoveScheduleBtn.Enabled = false;
                        MoveToQuarFromDistrustBtn.Enabled = false;
                        RemoveFileBtn4.Enabled = false;
                        RecoverFileBtn.Enabled = false;
                        button1.Enabled = false;
                        button2.Enabled = false;
                        button3.Enabled = false;
                        button4.Enabled = false;
                        HoldScanBtn.Enabled = false;

                        StatusLabel.Text = "Сервис не работает";
                        StatusLabel.ForeColor = Color.Red;
                    });
                }
                System.Threading.Thread.Sleep(10000);
            }
        }

        private void tabControl1_Enter(object sender, EventArgs e)
        {

        }

        private void tabControl1_Leave(object sender, EventArgs e)
        {

        }

        private void tabPage4_Enter(object sender, EventArgs e)
        {
            FuckingList.Visible = true;

           // MessageBox.Show("enter");
            quarantineList = serial.deserializeString("C:/antimalwareFolder" + "\\Quarantine.bin");
            FuckingList.Items.Clear();
            foreach (Pair<string, string> para in quarantineList)
            {
                ListViewItem item = new ListViewItem();
                item.Text = para.Second;
                item.SubItems.Add(para.First);
                FuckingList.Items.Add(item);
            }
            HashSet<Kernel.Pair<string, string>> distrustList = serial.deserializeString("C:/antimalwareFolder" + "\\Distrust.bin");
            DistrustList.Items.Clear();
            foreach (Pair<string, string> para in distrustList)
            {
                ListViewItem item = new ListViewItem();
                item.Text = para.Second;
                item.SubItems.Add(para.First);
                DistrustList.Items.Add(item);
            }
        }

        private void tabPage5_Enter(object sender, EventArgs e)
        {
        }

        private void tabPage5_Leave(object sender, EventArgs e)
        {
         //   boolService = false;
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

            monit = false;
            sched = false;
            boolService = false;
            TProcess.Abort();
        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void StartServiceBtn_Click(object sender, EventArgs e)
        {
            if(service.Status== ServiceControllerStatus.Stopped || service.Status == ServiceControllerStatus.Stopped)
            {
                service.Start();
            }
        }

        private void QuarantineList_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void QuarantineList_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Click");
        }

        private void tabPage4_Click(object sender, EventArgs e)
        {

        }

        private void ListOfScannedObj3_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void ListOfThreat_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void FuckingList_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void RemoveDistrustBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in DistrustList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.DELETE_FILE, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
            tabPage4_Enter(sender, e);

        }

        private void MoveToQuarFromDistrustBtn_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in DistrustList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.MOVE_TO_QUAR, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
            tabPage4_Enter(sender, e);

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_DISTRUST, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }

        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat2.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_DISTRUST, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in ListOfThreat3.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_DISTRUST, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            foreach (ListViewItem item in DistrustList.Items)
            {
                if (item.Checked)
                {
                    client.sentMessage(Command.REMOVE_DISTRUST, item.Text, item.SubItems[1].Text);
                    item.Remove();
                }
            }
            tabPage4_Enter(sender, e);
        }

        private void StopScanBtn_Click(object sender, EventArgs e)
        {

        }

        private void StopServiceBtn_Click(object sender, EventArgs e)
        {
            if(service.Status == ServiceControllerStatus.Running)
            {
                service.Stop();
            }
        }
    }
}
