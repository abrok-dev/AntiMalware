using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Threading;
using IPC;
namespace Service
{
    class Schedule
    {
        public HashSet<Pair<String, DateTime>> queueList;
        public HashSet<Pair<string, String>> detected;
        public HashSet<string> scanned;
        private Scanner scanner;
        public bool isFind =false;
        public bool tempLog = false;
        public DataHandler data = new DataHandler();
        public bool isEnd = true;
        public Server server;
        private ModulesSerializer serial = new ModulesSerializer();
        private void tryToRestore()
        {
          this.detected =  serial.deserializeString( "C:/antimalwareFolder" + "\\Detect.bin");
           this.queueList =  serial.deserializeTimeInfo("C:/antimalwareFolder" + "\\Schedule.bin");
        }
        public Schedule(Scanner scanner , ref Server server)
        {
            this.server = server;
            this.scanner = scanner;
            tryToRestore();
        }

        public bool start()
        {
            Pair<String, DateTime> firstElem;
            DateTime time;
            while (true)
            {//тут SLEEP
                

                checkList:
                System.Threading.Monitor.Enter(queueList);

                if (queueList.Count == 0)
                    {
                    System.Threading.Monitor.Exit(queueList);

                    Thread.Sleep(400);

                    //ВИДИМО НУЖНО ЧТО ТО ОБРАБАТЫВАТЬ
                    goto checkList;
                    }
                    time = DateTime.Now;
                    firstElem = findEarlierCase(queueList);
                if (firstElem.Second.CompareTo(time) <= 0)
                {
                    isEnd = false;
                    if (Directory.Exists(firstElem.First))
                    {
                        IEnumerable<string> files = Directory.EnumerateFiles(firstElem.First, "*", SearchOption.AllDirectories);
                        foreach (string file in files)
                        {
                            server.sentMessage(Response.CURRENT_SCAN_SCHEDULE, file);
                            ScanObject obj = scanner.scanGen(file);

                            byte[] name = scanner.scan(obj);
                            
                            
                                System.Threading.Monitor.Enter(detected);

                            if (name != null)
                            {
                                detected.Add(new Pair<string, string>(Encoding.UTF8.GetString(name), obj.filePath));
                                server.sentMessage(Response.SCHEDULE_CALLBACK, obj.filePath, Encoding.UTF8.GetString(name));
                                System.Threading.Monitor.Exit(detected);

                                isFind = true;
                                continue;
                            }
                            server.sentMessage(Response.SCHEDULE_CALLBACK, obj.filePath, null);

                            System.Threading.Monitor.Exit(detected);

                            

                        }

                        
                    }
                    else if (File.Exists(firstElem.First))
                    {
                        ScanObject obj = scanner.scanGen(firstElem.First);

                        byte[] name = scanner.scan(obj);
                        
                            detected.Add(new Pair<string, string>(Encoding.UTF8.GetString(name), obj.filePath));
                            isFind = true;
                        
                        queueList.Remove(firstElem);
                    }
                    isEnd = true;
                    queueList.Remove(firstElem);

                    serial.serializeTimeInfo(queueList, "C:\\antimalwareFolder" + "\\Schedule.bin");
                }
               

                System.Threading.Monitor.Exit(queueList);
                Thread.Sleep(400);
            }
 
        }
        //номер команды 1 байт +
        //опциональные поля содержащие размер 2 байта + 
        //поле переменной длины + 
        //1 байт конец или нет+ если не конец размер поля+ само поле ит д
        public bool addElement(Pair<string, DateTime> info)
        {
            System.Threading.Monitor.Enter(queueList);
            
                queueList.Add(info);
            serial.serializeTimeInfo(queueList, "C:\\antimalwareFolder" + "\\Schedule.bin");
            System.Threading.Monitor.Exit(queueList);
            //ИСПОЛЬЗОВАТЬ МЕТОДЫ СЕРИАЛИЗАЦИИ ВРЕМЕНИ
            // НО Я ПОКА НЕ ЗНАЮ ЧТО Я СЮДА ПОДАЮ
            return true;

        }
        public void removeElement(Pair<string, DateTime> info)
        {
            System.Threading.Monitor.Enter(queueList);
            
                queueList.Remove(info);
            serial.serializeTimeInfo(queueList, "C:\\antimalwareFolder" + "\\Schedule.bin");
            System.Threading.Monitor.Exit(queueList);
        }

        private Pair<String,DateTime> findEarlierCase(HashSet<Pair<String,DateTime>> list)
        {
            
            Pair<String,DateTime>time = list.ToArray()[0];
            foreach(Pair<String,DateTime> para in list)
            {
                if (0 >= para.Second.CompareTo(time.Second))
                    time = para;
            }
            return time;
        }
        public HashSet<Pair<string,String>> isFindSmt()
        {
            detected.Clear();

            HashSet<Pair<string, string>> found = null;
            while (!isFind)
            {
                System.Threading.Thread.Sleep(1000);
            }
            System.Threading.Monitor.Enter(detected);

            isFind = false;
                found = detected;
                System.Threading.Monitor.Exit(detected);
            
            

            return found;
        }

       
        public void saveData()
        {
            lock (detected)
            {
                serial.serializeString(detected, "C:\\antimalwareFolder" + "\\Detect.bin");
            }
            lock (queueList)
            {
                serial.serializeTimeInfo(queueList, "C:\\antimalwareFolder" + "\\Schedule.bin");
            }
        }
    }

}
