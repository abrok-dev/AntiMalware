using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using IPC;
using System.Threading;
using DataIO;
namespace Service
{
    partial class AntiMalwareService : ServiceBase
    {
        public AntiMalwareService()
        {
            this.CanPauseAndContinue = true;
            this.CanStop = true;
            InitializeComponent();
        }
        public delegate void logger(String path);
        protected RecordBank Bank;
        protected HashSet<Request> scanList = new HashSet<Request>();
        Server server;
        Scanner scanner;
        // HashSet<>
        bool scaning = false;
        bool monitoring = false;
        bool cheduling = false;
        bool stopScan = false;
        FileWorker fw;
        //Client client;
       // HashSet<Request> scanList;
        Monitor monitor;
        DataHandler dataHandler;
        Schedule schedule;
        Thread worker;


        internal void TestStartupAndStop(string[] args)
        {
            Console.WriteLine("Enter into Debug");
            this.OnStart(args);
            Console.WriteLine("Exit From Debug");
            Console.ReadLine();
            this.OnStop();
        }


        protected override void OnStart(string[] args)
        {
            this.Bank = new RecordBank("C:/Users/cheva/source/repos/AntiMalware/baseData.bin");
            this.server = new Server();
            dataHandler = new DataHandler();
            this.fw = new FileWorker(ref dataHandler);
            this.scanner = new Scanner(ref Bank,  fw);
           // client = new Client();

            monitor = new Monitor(new Scanner(ref Bank , fw));
            schedule = new Schedule(new Scanner(ref Bank, fw), ref server);
            


            // TODO: Добавьте код для запуска службы.
            worker = new Thread( Work);
            worker.Start();
        }
        /*создать главный поток который будет принимать сообщения от клиента
        и запускать потоки в зависимости от команды а эти потоки сами будут уже отправлять данные клиенту и т д;
             */

            public void Work()
            {
            
            Thread BGM = new Thread(BackGroundMonitor);
            Thread BGS = new Thread(BackGroundSchedule);
            Thread SchCallback = new Thread(ScheduleCallback);
            Thread MonCallback = new Thread(MonitorCallback);
            AntiMalwareService ams = new AntiMalwareService();
            BGM.Start();
            BGS.Start();
            SchCallback.Start();
            MonCallback.Start();
            Task Tscan = Task.Run(() => StartScan());

            


            while (true)
            {

                
              Request request =  server.tryGetMessage();
                

                switch (request.command)
                { 
					case Command.UPDATE_DATA:
                        {
                            UpdateData();
                            break;
                        }
					case Command.STOP_SCAN:
						{
                            stopScan = true;
                            scaning = false;
                            break;
						}
					case Command.START_SCAN:
                        {

                            //Thread TScan = new Thread(StartScan);
                            scanList.Add(request);
                            scaning = true;
                           // TScan.Start(request);
                            break;
                        }
					case Command.MOVE_TO_QUAR:
                        {
                            MoveToQuar(request);
                            break;
                        }
					case Command.BACK_FROM_QUAR:
                        {
                            BackFromQuar(request);
                            break;
                        }
					case Command.DELETE_FILE:
                        {
                            DeleteFile(request);
                            break;
                        }
					case Command.ADD_MONIT:
                        {
                            if (monitor.monitorDirectory.Count == 0)
                            {
                                AddMonitor(request);
                                try
                                {
                                    BGM.Start();
                                }
                                catch (System.Threading.ThreadStateException) { }
                                try
                                {
                                    MonCallback.Start();
                                }
                                catch (System.Threading.ThreadStateException) { }
                            }
                            else
                            AddMonitor(request);
                            break;
                        }
					case Command.REMOVE_MONIT:
                        {
                            RemoveMonitor(request);
                            if (monitor.monitorDirectory.Count == 0)
                            {
#pragma warning disable CS0618 // Тип или член устарел
                                BGM.Suspend();
                                MonCallback.Suspend();
#pragma warning restore CS0618 // Тип или член устарел

                            }
                            break;
                        }

					case Command.SCHEDULE_ADD:
                        {
                            if (schedule.queueList.Count == 0)
                            {
                                ScheduleAdd(request);
                                try
                                {
                                    BGS.Start();
                                }
                                catch (System.Threading.ThreadStateException) { }
                                try {
                                    SchCallback.Start();
                                }
                                catch (System.Threading.ThreadStateException) { }
                            }
                            else ScheduleAdd(request);
                            break;
                        }
					case Command.SCHEDULE_REMOVE:
						{
                            ScheduleRemove(request);
                            if (schedule.queueList.Count == 0) {
#pragma warning disable CS0618 // Тип или член устарел
                                SchCallback.Suspend();
                                BGS.Suspend();
#pragma warning restore CS0618 // Тип или член устарел
                            }
                            break;
						}
                    case Command.REMOVE_DISTRUST:
                        {
                            System.Threading.Monitor.Enter(dataHandler.distrustList);
                            dataHandler.distrustList.Remove(new Pair<string, string>(request.time, request.path));
                            System.Threading.Monitor.Exit(dataHandler.distrustList);

                            dataHandler.saveData();
                            break;
                        }

                    case Command.QUARANTINE_DATA:
					

					default:
                        break;
				}
            }
        }
        protected override void OnStop()
        {
            
            schedule.saveData();
            monitor.saveData();
            dataHandler.saveData();
            worker.Abort();
            // TODO: Добавьте код, выполняющий подготовку к остановке службы.
        }


        public  void UpdateData()
        {
            Bank.updateData();
        }

        public void StartScan()
        {
            while (true)
            {

                while (!scaning)
                {
                    System.Threading.Thread.Sleep(1000);
                }

                //Request request = (Request) param ;
                // HashSet<Request> list = scanList;
                int danger = 0;
                int count = 0;
                foreach (Request request in scanList)
                {
                   
                    if (Directory.Exists(request.path))
                    {
                        IEnumerable<String> files = Directory.EnumerateFiles(request.path, "*", SearchOption.AllDirectories);
                        foreach (String file in files)
                        {
                            if (stopScan)
                            {
                                stopScan = false;
                                
                                break;
                            }
                            server.sentMessage(Response.CURRENT_SCAN, file);

                            ScanObject obj = scanner.scanGen(file);
                            byte[] result = scanner.scan(obj);

                            // Response resp = new Response();
                            if (result == null)
                            {
                                server.sentMessage(Response.RESULT_SCAN_FILE, file);
                                count++;
                            }
                            else
                            {
                                dataHandler.distrustList.Add(new Pair<string, string>(Encoding.UTF8.GetString(result), file));
                                server.sentMessage(Response.RESULT_SCAN_FILE, file, Encoding.UTF8.GetString(result));
                                count++;
                                danger++;
                                dataHandler.saveData();

                            }


                        }
                        server.sentMessage(Response.REPORT_SCAN, request.path);
                    }
                    else if (File.Exists(request.path))
                    {
                        if (stopScan)
                        {
                            stopScan = false;

                            break;
                        }
                        server.sentMessage(Response.CURRENT_SCAN, request.path);

                        ScanObject obj = scanner.scanGen(request.path);
                        byte[] result = scanner.scan(obj);

                        // Response resp = new Response();
                        if (result == null)
                        {
                            server.sentMessage(Response.RESULT_SCAN_FILE, request.path);
                            count++;
                        }
                        else
                        {
                            dataHandler.distrustList.Add(new Pair<string, string>(Encoding.UTF8.GetString(result), request.path));
                            server.sentMessage(Response.RESULT_SCAN_FILE, request.path, Encoding.UTF8.GetString(result));
                            dataHandler.saveData();
                            danger++;
                            count++;
                        }

                    }
                    //scanList.Remove(request);
                }
                server.sentMessage(Response.REPORT_SCAN, Convert.ToString(count), Convert.ToString(danger));

                scanList.Clear();
                scaning = false;
            }

        }

        public void MoveToQuar(Request request)
        {
            if (dataHandler.moveToQuarantine(new Pair<string, string>(request.time, request.path)))
            {
                fw.breakPe(request.path);
                File.Move(request.path , "C:\\antimalwareFolder\\quarantine\\"+ Path.GetFileName(request.path));
            }

            //доделать
        }
        public void BackFromQuar(Request request)
        {
            if (dataHandler.restoreFromQuarantine(new Pair<string, string>(request.time, request.path))) {
                ///TODO:
                

                File.Move( "C:\\antimalwareFolder\\quarantine\\" + Path.GetFileName(request.path)  , request.path);
                fw.breakPe(request.path);

            };

        }

        public void MonitorCallback()
        {
            while (true)
            {
                HashSet<Pair<string, string>> results = monitor.isFoundSmt();
                HashSet<Pair<string, string>> res = results;
                foreach (Pair<string, string> para in res)
                {

                    server.sentMessage(Response.MONITOR_CALLBACK, para.Second, para.First);
                    if (para.First != null)
                    {
                        dataHandler.distrustList.Add(para);
                        dataHandler.saveData();

                    }
                }
                
            }
        }
        public void ScheduleCallback()
        {
            while (true)
            {
                int danger = 0; 
                int count = 0;
                while (!schedule.isEnd)
                {
                    HashSet<Pair<string, string>> results = schedule.isFindSmt();
                    foreach (Pair<string, string> para in results)
                    {
                       //  server.sentMessage(Response.SCHEDULE_CALLBACK, para.Second, para.First);
                        
                            dataHandler.distrustList.Add(para);
                            dataHandler.saveData();

                            
                    }
                }
                //server.sentMessage(Response.REPORT_SCHEDULE_SCAN, Convert.ToString(count),Convert.ToString(danger));
            }
        }
        public void DeleteFile(Request request)
        {
            if (dataHandler.itRemove(new Pair<string, string>(request.time, request.path))) {
                File.Delete(request.path);
            };


        }

        public void AddMonitor(Request request)
        {
            monitor.addDirectory(request.path);
        }
        
        public void BackGroundMonitor()
        {
            monitor.start();
        }
        public void BackGroundSchedule()
        {
            schedule.start();
        }
        public void RemoveMonitor(Request request)
        {
            monitor.removeDirectory(request.path);
            
        }

        public void ScheduleAdd(Request request)
        {
            
            schedule.addElement(new Pair<string, DateTime>(request.path, request.time));
            
        }
        public void ScheduleRemove(Request request)
        {
            schedule.removeElement(new Pair<string, DateTime>(request.path, request.time));
            
        }
    }
}
