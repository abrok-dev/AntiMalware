using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Service
{
    public class ModulesSerializer
    {

        private long compute(dynamic str)
        {
            long result = 0;
            foreach (dynamic temp in str)
            {
                result++;
            }
            return result;
        }

        public void serializeString(HashSet<Pair<string, String>> para, String where)//ВОЗМОЖНО БУДЕТ КОНФЛИКТ МЕЖДУ ЧТЕНИЕМ И ЗАПИСЬЮ ДЛИНЫ 
        {                                                                             //НАЗВАНИЯ ИЗ ЗА ТОГО ЧТО ГДЕ ТО ЗАПИСЫВАЕТСЯ В БАЙТ А ЧИТАЕТСЯ ИНТ


        checkFile:
            try
            {
                BinaryWriter bw = new BinaryWriter(File.Open(where, FileMode.Create));

                int size = para.Count;
                bw.Write(size);
                foreach (Pair<string, string> temp in para)
                {
                    int nameSize = temp.First.Length;
                    bw.Write(nameSize);
                    bw.Write(Encoding.UTF8.GetBytes(temp.First));
                    int pathSize = temp.Second.Length;
                    bw.Write(pathSize);
                    bw.Write(Encoding.UTF8.GetBytes(temp.Second));
                }
                bw.Close();
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }

        }
        public void serializeDirectory(HashSet<String> dir, String where)
        {

            BinaryWriter bw;
        checkFile:

            try
            {
                bw = new BinaryWriter(File.Open(where, FileMode.Create));
                int size = dir.Count;
                bw.Write(size);
                foreach (string temp in dir)
                {
                    int pathSize = temp.Length;
                    bw.Write(pathSize);
                    bw.Write(Encoding.UTF8.GetBytes(temp));

                }
                bw.Close();
                return;
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }

        }



        public void serializeTimeInfo(HashSet<Pair<String, DateTime>> list, String where)
        {

        checkFile:

            try
            {
                BinaryWriter bw = new BinaryWriter(File.Open(where, FileMode.Create));
                int size = list.Count;
                bw.Write(size);
                foreach (Pair<String, DateTime> pair in list)
                {
                    bw.Write(pair.Second.ToBinary());
                    size = pair.First.Length;
                    bw.Write(size);
                    bw.Write(Encoding.UTF8.GetBytes(pair.First));

                }
                bw.Close();
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }
        }

        public HashSet<Pair<string, String>> deserializeString(String from)
        {
            HashSet<Pair<string, String>> result = new HashSet<Pair<string, String>>();
        checkFile:
            try
            {
                BinaryReader br = new BinaryReader(File.Open(from, FileMode.OpenOrCreate));
                int size, sizeArr;
                sizeArr = br.ReadInt32();

                for (int i = 0; i < sizeArr; i++)
                {
                    Pair<string, string> para = new Pair<string, string>();
                    //TODO: ERROR HANDLER end of file
                    int nameSize = br.ReadInt32();
                    para.First = Encoding.UTF8.GetString(br.ReadBytes(nameSize));
                    int pathSize = br.ReadInt32();
                    para.Second = Encoding.UTF8.GetString(br.ReadBytes(pathSize));
                    result.Add(para);
                }

                br.Close();
                return result;
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }

        }

        public HashSet<string> deserializeDirectory(String from)
        {

            HashSet<string> result = new HashSet<string>();

        checkFile:
            try
            {
                BinaryReader br = new BinaryReader(File.Open(from, FileMode.OpenOrCreate));
                int size, sizeArr;
                sizeArr = br.ReadInt32();

                for (int i = 0; i < sizeArr; i++)
                {

                    //TODO: ERROR HANDLER end of file
                    int nameSize = br.ReadInt32();
                    result.Add(Encoding.UTF8.GetString(br.ReadBytes(nameSize)));

                }

                br.Close();
                return result;
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }

        }

        public HashSet<Pair<String, DateTime>> deserializeTimeInfo(String from)
        {
            HashSet<Pair<String, DateTime>> result = new HashSet<Pair<String, DateTime>>();

        checkFile:
            try
            {
                BinaryReader br = new BinaryReader(File.Open(from, FileMode.OpenOrCreate));

                int size, sizeArr;
                sizeArr = br.ReadInt32();

                for (int i = 0; i < sizeArr; i++)
                {

                    //TODO: ERROR HANDLER end of file
                 //   size = br.ReadInt32();
                    DateTime time = DateTime.FromBinary(br.ReadInt64());
                    size = (br.ReadInt32());
                    string path = Encoding.UTF8.GetString(br.ReadBytes(size));
                    result.Add(new Pair<string, DateTime>(path, time));
                }
                br.Close();
                return result;
            }
            catch (IOException)
            {
                System.Threading.Thread.Sleep(300);
                goto checkFile;
            }

        }
    }
}
