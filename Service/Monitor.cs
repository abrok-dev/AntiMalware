using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace Service
{
    class Monitor
    {
        public Scanner scanner;
       // public DataHandler data;
        public HashSet<String> monitorFile;
        public HashSet<String> monitorDirectory;
        public HashSet<Pair<string, string>> detected = new HashSet<Pair<string, string>>();
        public Dictionary<String, DateTime> lastWriteTimeFile;
        public bool isFind=false;
       // public Dictionary<String, DateTime> lastWriteTimeDirectory;
        public ModulesSerializer serial = new ModulesSerializer();
        private  void tryToRestore()
        {
            this.monitorDirectory = serial.deserializeDirectory("C:/antimalwareFolder" + "\\Monitor.bin");
            foreach(string dir in monitorDirectory)
            {
                IEnumerable<string> files = Directory.EnumerateFiles(dir);
                foreach (string file in files)
                {
                    this.lastWriteTimeFile[file] = File.GetLastWriteTime(file);
                }
               
            }
        }

        public Monitor(Scanner scanner )
        {
            this.lastWriteTimeFile = new Dictionary<string, DateTime>();
            this.scanner = scanner;
            
            tryToRestore();
        }

        public bool addDirectory(String path)
        {
            System.Threading.Monitor.Enter(monitorDirectory);
            monitorDirectory.Add(path);
            IEnumerable<string> files = Directory.EnumerateFiles(path);
            foreach(string file in files)
            {
                lastWriteTimeFile[file] = File.GetLastWriteTime(file);
            }
            System.Threading.Monitor.Exit(monitorDirectory);
            saveData();
            return true;
        }
        public bool removeDirectory(String str)
        {
            System.Threading.Monitor.Enter(monitorDirectory);

            monitorDirectory.Remove(str);
            IEnumerable<string> files = Directory.EnumerateFiles(str);
            foreach (string file in files)
            {
                lastWriteTimeFile.Remove(file);
            }
            System.Threading.Monitor.Exit(monitorDirectory);
            saveData();
            return true;
        }
        public void start()
        {
            while (true)
            {
             /*           System.Threading.Monitor.Enter(lastWriteTimeFile);

                foreach (KeyValuePair<String,DateTime> file in this.lastWriteTimeFile)
                {
                    if(!File.Exists(file.Key))
                    {
                        lastWriteTimeFile.Remove(file.Key);
                    }
                }
                System.Threading.Monitor.Exit(lastWriteTimeFile);
*/
                System.Threading.Monitor.Enter(monitorDirectory);

                HashSet<String> directoryes = monitorDirectory;

                System.Threading.Monitor.Exit(monitorDirectory);

                foreach (String dir in directoryes)
                    foreach (String file in Directory.EnumerateFiles(dir, "*", SearchOption.AllDirectories))
                    {
                        DateTime currentLastTime = File.GetLastWriteTime(file);
                        System.Threading.Monitor.Enter(detected);   
                        if (!lastWriteTimeFile.ContainsKey(file))
                        {
                            lastWriteTimeFile[file] = currentLastTime;//TODO:01 05 2021
                           
                            ScanObject obj = scanner.scanGen(file);
                            byte[] result;
                          //   isFind = false;
                            
                                result = scanner.scan(obj);

                            if (result != null)
                            {

                                detected.Add(new Pair<string, string>(Encoding.UTF8.GetString(result), obj.filePath));
                                isFind = true;
                            }
                            else
                            {
                                detected.Add(new Pair<string, string>(null, obj.filePath));
                                isFind = true;
                            }
                                
                            
                            //ТИПА ЧЕТО НУЖНО ЗАПУСКАТЬ ЕСЛИ НАШЕЛ ВИРУС
                        }
                        else
                        {
                            if(lastWriteTimeFile[file] != currentLastTime)
                            {
                                lastWriteTimeFile[file] = currentLastTime;
                               
                                ScanObject obj = scanner.scanGen(file);
                                byte[] result;
                                // isFind = false;
                                
                                    result = scanner.scan(obj);
                                    if (result != null)
                                    {
                                    detected.Add(new Pair<string, string>(Encoding.UTF8.GetString(result), obj.filePath));
                                    isFind = true;
                                    }
                                else
                                {
                                    detected.Add(new Pair<string, string>(null, obj.filePath));
                                    isFind = true;
                                }

                                
                            }

                        }
                        System.Threading.Monitor.Exit(detected);


                    }


                System.Threading.Thread.Sleep(400);

            }
        }
        public HashSet< Pair<string,string>> isFoundSmt()
        {
            System.Threading.Monitor.Enter(detected);

            detected.Clear();
            System.Threading.Monitor.Exit(detected);

            HashSet<Pair<string, string>> result = null;
            while (!isFind)
            {
                System.Threading.Thread.Sleep(399);

            }
            System.Threading.Monitor.Enter(detected);
            isFind = false;
                 result = detected;
                System.Threading.Monitor.Exit(detected);

                return result;
            
            
        }
        public void saveData()
        {
            serial.serializeDirectory(monitorDirectory, "C:/antimalwareFolder"  + "\\Monitor.bin");
        }
    }
}
