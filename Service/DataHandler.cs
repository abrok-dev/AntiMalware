using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace Service
{
    class DataHandler
    {

        public  HashSet<Pair<String,String>> distrustList;//name + path
        public  HashSet<Pair<String ,String>> quarantineList;//name+ path

        public ModulesSerializer serial = new ModulesSerializer();

        public DataHandler()
        {
            this.tryToRestore();
        }

        public bool swap(ref HashSet<Pair<String, String>>  from , ref HashSet<Pair<String, String>> to , Pair<string,string> value)
        {
            System.Threading.Monitor.Enter(distrustList);
            System.Threading.Monitor.Enter(quarantineList);
            if (from.Contains(value))
            {
                to.Add(value);
                from.Remove(value);
                System.Threading.Monitor.Exit(distrustList);
                System.Threading.Monitor.Exit(quarantineList);
                return true;
            }
            System.Threading.Monitor.Exit(distrustList);
            System.Threading.Monitor.Exit(quarantineList);
            return false;
        }
       
        public bool moveToQuarantine(Pair<String, String> value)
        {
         
            bool temp = swap( ref distrustList,ref quarantineList, value);

            saveData();
            
            

            return temp;
        }
        public bool itRemove(Pair<String, String> value)
        {
            if (distrustList.Contains(value))
            {
                distrustList.Remove(value);
                saveData();
                return true;
            }
            if (quarantineList.Contains(value))
            {
                quarantineList.Remove(value);
                saveData();
                return true;
            }
            return false;
        }
        public bool restoreFromQuarantine(Pair<String, String> value)
        {
           
            bool temp = swap( ref quarantineList, ref distrustList, value);
            saveData();
           
            return temp;

        }

        public void saveData()
        {
            System.Threading.Monitor.Enter(distrustList);
            System.Threading.Monitor.Enter(quarantineList);
            serial.serializeString(distrustList, "C:/antimalwareFolder" + "\\Distrust.bin");
            serial.serializeString(quarantineList, "C:/antimalwareFolder" +  "\\Quarantine.bin");
            System.Threading.Monitor.Exit(distrustList);
            System.Threading.Monitor.Exit(quarantineList);

        }

        

        private void tryToRestore()
        {
            this.distrustList = serial.deserializeString("C:/antimalwareFolder"  + "\\Distrust.bin");

            quarantineList  = serial.deserializeString("C:/antimalwareFolder"  + "\\Quarantine.bin");

/*
            String path = Directory.GetCurrentDirectory() + "\\..\\Quarantine\\";
            if (Directory.Exists(path))
            {
                foreach( String file  in Directory.EnumerateFiles(path , "*" , SearchOption.AllDirectories))
                {
                    this.quarantineList.Add(file);
                }

                
            }*/
        }
    }
}
